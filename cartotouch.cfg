[mcu cartographer]
serial: /dev/serial/by-id/usb-Cartographer_614e_36000E000F43304146393320-if00
restart_method: command
is_non_critical: true

[cartographer]
mcu: cartographer
x_offset:0
y_offset:-22
verbose: yes # For extra output

#[cartographer touch]
#samples: 10
#max_samples: 50

[cartographer scan]
#mesh_runs: 1
#mesh_direction: x
mesh_path: spiral

[temperature_sensor cartographer]
sensor_type: temperature_mcu
sensor_mcu: cartographer
min_temp: 5
max_temp: 105

[temperature_sensor cartographer_coil]
sensor_type: cartographer_coil
min_temp: 5
max_temp: 140

[bed_mesh]
zero_reference_position: 114.50,115.00
horizontal_move_z: 3
speed: 300
mesh_min: 15, 15
mesh_max: 200, 190
probe_count: 45,45
#adaptive_margin: 10
mesh_pps: 0,0 # Disable interpolation - mesh is probably dense enough

[screws_tilt_adjust]
screw1: 29.50,47
screw1_name: front left screw
screw2: 204.50,47
screw2_name: front right screw
screw3: 199.50,216.50
screw3_name: rear right screw
screw4: 29.50,216.50
screw4_name: rear left screw
speed: 100
horizontal_move_z: 10
screw_thread: CW-M4

#[z_tilt]
#z_positions:        # Lead Screw Pivot
#   114.50, 281.50      # rear Z
#   244.50, 2   # front right Z1
#   -35.50, 2   # front left Z2
#points:             # Probe Bed 
#   114.50, 216.50      #rear Z
#   199.50, 47       #front right Z1
#   29.50, 47        #front left Z2
#speed: 300
#horizontal_move_z: 10
#retries: 25
#retry_tolerance: 0.005

[z_tilt_ng]
#z_positions:
#   114.50, 281.50
#   244.50, 2
#   -35.50, 2
points:  
   114.50, 216.50
   199.50, 47
   29.50, 47   
speed: 300
horizontal_move_z: 15
adaptive_horizontal_move_z: True
min_horizontal_move_z: 3
retries: 10
retry_tolerance: 0.005
increasing_threshold: 0.0000001
extra_points:
averaging_len: 3
autodetect_delta: 1.0

[axis_twist_compensation]
speed: 300
horizontal_move_z: 3
calibrate_start_x: 25
calibrate_end_x: 200
calibrate_y: 105
calibrate_start_y: 38
calibrate_end_y: 190
calibrate_x: 104.50

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_square_corner_velocity = printer.toolhead.square_corner_velocity %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% set start_max_square_corner_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_square_corner_velocity, max_square_corner_velocity]|min %}

    {% if printer["gcode_macro _SAF_BED_MESH_START"] != null %}
    _SAF_BED_MESH_START
    {% endif %}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel}) SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity} (was {max_square_corner_velocity})'
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel} SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity}
    {% endif %}

    _BED_MESH_CALIBRATE {rawparams}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}'
        SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}
    {% endif %}

    {% if printer["gcode_macro _SAF_BED_MESH_END"] != null %}
    _SAF_BED_MESH_END
    {% endif %}
