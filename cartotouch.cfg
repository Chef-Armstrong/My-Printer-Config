[mcu cartographer]
serial: /dev/serial/by-id/usb-Cartographer_614e_1D0000000443565633393720-if00
# low profile carto: usb-Cartographer_614e_36000E000F43304146393320-if00

restart_method: command
is_non_critical: true

[cartographer]
mcu: cartographer
x_offset: -24.0
y_offset: 0.0
travel_speed: 50
#macro_prefix:
verbose: yes

[cartographer touch]
samples: 5
max_samples: 15
#UNSAFE_max_touch_temperature: 150

[cartographer scan]
probe_speed: 5
mesh_runs: 1
mesh_direction: x
mesh_height: 3
mesh_path: alternating_snake
#   The path to use when calibrating a scan mesh - either 'snake',
#   'alternating_snake', 'spiral' or 'random'.
#   The default is snake.

[temperature_sensor cartographer]
sensor_type: temperature_mcu
sensor_mcu: cartographer
min_temp: 5
max_temp: 105

[screws_tilt_adjust]
screw1_name: front left
screw1: 53.50, 25
screw2_name: front right
screw2: 223.50, 25
screw3_name: back right
screw3: 223.50, 194.50
screw4_name: back left
screw4: 53.50, 194.50
speed: 50
horizontal_move_z: 10
screw_thread: CW-M4

[bed_mesh]
zero_reference_position: 117.50,117.50
horizontal_move_z: 3
speed: 350
mesh_min: 15,15
mesh_max: 200,210
probe_count: 50,50
adaptive_margin: 10
mesh_pps: 0,0

[z_tilt_ng]
points:  
   138.50,194.50    # (114.50+24 , 216.50-22)
   223.50,25        # (199.50+24 , 47-22)
   53.50,25         # (29.50+24 , 47-22)
speed: 350
horizontal_move_z: 25
adaptive_horizontal_move_z: True
min_horizontal_move_z: 2
retries: 10
retry_tolerance: 0.005
increasing_threshold: 0.5
extra_points:
   53.50,194.50     # (29.50+24 , 216.50-22)
   223.50,194.50    # (199.50+24 , 216.50-22)
   138.50,25        # (114.50+24 , 47-22)
averaging_len: 5
autodetect_delta: 1.0

[axis_twist_compensation]
speed: 50
horizontal_move_z: 10
calibrate_start_x: 40
calibrate_end_x: 200
calibrate_y: 105

[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_square_corner_velocity = printer.toolhead.square_corner_velocity %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% set start_max_square_corner_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_square_corner_velocity, max_square_corner_velocity]|min %}
    
    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel}) SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity} (was {max_square_corner_velocity})'
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel} SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity}
    {% endif %}

    _Z_TILT_ADJUST {rawparams}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}'
        SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_square_corner_velocity = printer.toolhead.square_corner_velocity %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% set start_max_square_corner_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_square_corner_velocity, max_square_corner_velocity]|min %}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel}) SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity} (was {max_square_corner_velocity})'
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel} SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity}
    {% endif %}

    _BED_MESH_CALIBRATE {rawparams}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}'
        SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}
    {% endif %}